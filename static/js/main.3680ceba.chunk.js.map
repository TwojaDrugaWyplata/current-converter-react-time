{"version":3,"sources":["Container/index.js","Header/index.js","Label/index.js","Select/index.js","rates.js","Form/index.js","Result/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","children","className","Header","date","Label","labelText","Select","value","setValue","options","onChange","target","map","label","key","rates","code","currency","mid","ratesToOptions","Form","amount","setAmount","fromCurrency","setFromCurrency","toCurrency","setToCurrency","type","Result","find","toFixed","App","useState","Date","setDate","useEffect","intervalId","setInterval","clearInterval","toLocaleDateString","weekday","day","month","hour","minute","second","getDateString","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3680ceba.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\n\nconst Container = ({ children }) => (\n  <main className=\"container\">\n    {children}\n  </main>\n)\n\nexport default Container;","import React from \"react\";\nimport \"./styles.css\";\n\nconst Header = ({ date }) => (\n  <header className=\"header\">\n    <p className=\"header__date\">Dzisiaj jest {date}</p>\n    <h1 className=\"header__title\">Przelicznik walut</h1>\n  </header>\n)\n\nexport default Header;","import React from \"react\";\nimport \"./styles.css\";\n\nconst Label = ({ children, labelText }) => (\n  <p>\n    <label className=\"label\">\n      {labelText}:\n      {children}\n    </label>\n  </p>\n)\n\nexport default Label;","import React from \"react\";\n\nconst Select = ({ value, setValue, options }) => (\n  <select\n    className=\"form__select\"\n    value={value}\n    onChange={({ target }) => setValue(target.value)}\n  >\n    {options.map(({ value, label }) => <option key={value} value={value}>{label}</option>)}\n  </select>\n)\n\nexport default Select","export const rates = [\n  { code: \"PLN\", currency: \"złoty\", mid: 1 },\n  { code: \"EUR\", currency: \"euro\", mid: 4.44 },\n  { code: \"USD\", currency: \"dolar amerykański\", mid: 3.85 },\n  { code: \"GBP\", currency: \"funt szterling\", mid: 4.84 },\n  { code: \"UAH\", currency: \"hrywna (Ukraina)\", mid: 0.1364 },\n  { code: \"CHF\", currency: \"frank szwajcarski\", mid: 4.10 },\n  { code: \"JPY\", currency: \"jen\", mid: 0.0352 }\n];","import React from \"react\";\nimport Label from \"../Label\";\nimport Select from \"../Select\";\nimport { rates } from \"../rates\";\nimport \"./styles.css\";\n\nconst ratesToOptions = () => (\n  rates.map(({ code, currency }) => ({\n    value: code,\n    label: currency,\n  }))\n)\n\nconst Form = ({ amount, setAmount, fromCurrency, setFromCurrency, toCurrency, setToCurrency }) => (\n  <form className=\"form\">\n    <fieldset className=\"form__fieldset\">\n      <Label labelText=\"Pierwsza waluta\">\n        <Select\n          value={fromCurrency}\n          setValue={setFromCurrency}\n          options={ratesToOptions()}\n        />\n      </Label>\n      <Label labelText=\"Kwota\">\n        <input\n          className=\"form__field\"\n          type=\"number\"\n          value={amount}\n          onChange={({ target }) => setAmount(target.value)}\n        />\n      </Label>\n      <Label labelText=\"Druga waluta\">\n        <Select\n          value={toCurrency}\n          setValue={setToCurrency}\n          options={ratesToOptions()}\n        />\n      </Label>\n    </fieldset>\n  </form>\n)\n\nexport default Form;\n","import React from \"react\";\nimport \"./styles.css\";\nimport { rates } from \"../rates\";\n\nconst Result = ({ amount, fromCurrency, toCurrency }) => (\n  <h2 className=\"result\">\n    {amount}&nbsp;{fromCurrency}&nbsp;= {\n      (\n        +amount *\n        (\n          rates.find(({ code }) => code === fromCurrency).mid /\n          rates.find(({ code }) => code === toCurrency).mid\n        )\n      ).toFixed(2)\n    }&nbsp;{toCurrency}\n  </h2>\n)\n\nexport default Result;","import React, { useState, useEffect } from \"react\";\nimport Container from \"./Container\";\nimport Header from \"./Header\";\nimport Form from \"./Form\";\nimport Result from \"./Result\";\nimport { rates } from \"./rates\";\n\nfunction App() {\n  const [amount, setAmount] = useState(\"100\");\n  const [fromCurrency, setFromCurrency] = useState(rates[0].code);\n  const [toCurrency, setToCurrency] = useState(rates[1].code);\n  const [date, setDate] = useState(new Date());\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setDate(new Date());\n    }, 1000)\n\n    return () => {\n      clearInterval(intervalId)\n    }\n  }, [])\n\n  const getDateString = (date) => (\n    date.toLocaleDateString(\"pl-PL\",\n      {\n        weekday: \"long\",\n        day: \"numeric\",\n        month: \"long\",\n        hour: \"numeric\",\n        minute: \"numeric\",\n        second: \"numeric\"\n      }\n    )\n  )\n\n  return (\n    <Container>\n      <Header date={getDateString(date)} />\n      <Form\n        amount={amount}\n        setAmount={setAmount}\n        fromCurrency={fromCurrency}\n        setFromCurrency={setFromCurrency}\n        toCurrency={toCurrency}\n        setToCurrency={setToCurrency}\n      />\n      <Result\n        amount={amount}\n        fromCurrency={fromCurrency}\n        toCurrency={toCurrency}\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}